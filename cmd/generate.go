package cmd

import (
	"context"
	"fmt"
	"mault/internal/crypto"
	"mault/internal/prompt"
	"mault/internal/storage"
	"mault/internal/storage/base"
	"mault/internal/storage/secret"
	"os"

	"github.com/urfave/cli/v2"
)

var generateC *cli.Command = &cli.Command{
	Name:  "generate",
	Usage: "generates a strong secret for you",
	Args:  false,
	Action: func(ctx *cli.Context) error {
		db, err := storage.PrepareDatabase()
		if err != nil {
			return fmt.Errorf("generate command failed: %w", err)
		}

		bm := base.NewManager(db)
		if !bm.IsInitialized() {
			return fmt.Errorf("you haven't initialized the mault yet")
		}

		sm := secret.NewManager(db)
		return generateSecret(ctx.Context, bm, sm)
	},
}

func generateSecret(ctx context.Context, bm *base.Manager, sm *secret.Manager) error {
	key, err := prompt.GetKey(os.Stdin)
	if err != nil {
		return err
	}

	var autoGeneratedPassword []byte
	for {
		var choice string
		autoGeneratedPassword, err = secret.GenerateRandom(16)
		if err != nil {
			return fmt.Errorf("generating password error: %v", err)
		}

		fmt.Println("The auto generated secret for you is: ", string(autoGeneratedPassword))
		for choice != "y" && choice != "n" {
			fmt.Printf("Approve? (y/n) ")
			fmt.Scanln(&choice)
		}
		if choice == "y" {
			break
		}
	}

	result, err := bm.Authenticate(ctx)
	if err != nil {
		return err
	}

	nonce, ciphertext, err := crypto.EncryptWithAESGCM(autoGeneratedPassword, result.DerivedKey)
	if err != nil {
		return fmt.Errorf("encryption error: %v", err)
	}

	if err := sm.CreateSecret(ctx, &secret.Record{
		Key:        key,
		Nonce:      nonce,
		CipherText: ciphertext,
	}); err != nil {
		return fmt.Errorf("creating secret error: %v", err)
	}

	fmt.Println("Secret has created successfully!")
	return nil
}
